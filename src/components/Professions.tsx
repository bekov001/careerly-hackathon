import { useState, useEffect } from 'react';

type Props = {
  answers: string[];
  setSelectedJob: (job: string) => void;
  onNext: () => void;
};

function Professions({ answers, setSelectedJob, onNext }: Props) {
  const [suggestedJobs, setSuggestedJobs] = useState<string[]>([]);
  const allJobs = ['Frontend Developer', 'Backend Developer', 'UX Designer', 'Data Analyst', 'Marketing Specialist', 'Game Designer', 'Project Manager', 'Technical Writer'];

  useEffect(() => {
    // Simple mock logic for job suggestion based on answers
    const generateSuggestions = () => {
      const suggestions = new Set<string>();

      if (answers.includes('–†–µ—à–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏') || answers.includes('–¢–æ—á–Ω—ã–µ –Ω–∞—É–∫–∏ (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞)')) {
        suggestions.add('Frontend Developer');
        suggestions.add('Backend Developer');
        suggestions.add('Data Analyst');
      }
      if (answers.includes('–¢–≤–æ—Ä–∏—Ç—å –∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ') || answers.includes('–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω')) {
        suggestions.add('UX Designer');
        suggestions.add('Game Designer');
      }
      if (answers.includes('–ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º') || answers.includes('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏')) {
        suggestions.add('Project Manager');
        suggestions.add('Marketing Specialist');
      }
      if (answers.includes('–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')) {
        suggestions.add('Technical Writer');
        suggestions.add('Data Analyst');
      }

      // Fallback if no specific suggestions
      if (suggestions.size === 0) {
        return allJobs.slice(0, 3); // Show first 3 jobs if no strong match
      }

      return Array.from(suggestions).slice(0, 5); // Limit to top 5 suggestions
    };

    setSuggestedJobs(generateSuggestions());
  }, [answers]);

  const handleClick = (job: string) => {
    setSelectedJob(job);
    onNext();
  };

  return (
    <div className="max-w-2xl mx-auto bg-white p-8 rounded-lg shadow-xl border border-gray-200 animate-fade-in">
      <h2 className="text-3xl font-extrabold text-gray-800 mb-6 text-center">–¢–≤–æ–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ üåü</h2>
      <p className="mb-6 text-gray-600 text-center">–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</p>
      <ul className="space-y-4">
        {suggestedJobs.map((job) => (
          <li key={job}>
            <button
              onClick={() => handleClick(job)}
              className="w-full bg-blue-50 hover:bg-blue-100 p-4 rounded-lg text-left text-blue-800 font-semibold shadow-sm hover:shadow-md transition duration-300 ease-in-out transform hover:scale-102 flex justify-between items-center"
            >
              <span>{job}</span>
              <span className="text-blue-500 text-sm">–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ ‚Üí</span>
            </button>
          </li>
        ))}
      </ul>
      {suggestedJobs.length === 0 && (
        <p className="text-center text-gray-500 mt-8">–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</p>
      )}
      <div className="mt-8 text-center">
        <button onClick={() => handleClick(allJobs[0])} className="text-blue-600 hover:underline text-sm">
          –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        </button>
      </div>
    </div>
  );
}

export default Professions;