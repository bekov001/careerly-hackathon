import React, { useState } from 'react';

type Props = {
  onNext: () => void; // This onNext will now handle showing the modal or proceeding
  setUserInfo: (info: string) => void;
};

function Intro({ onNext, setUserInfo }: Props) {
  const [wordCountError, setWordCountError] = useState<string | null>(null); // State for word count error

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;
    const info = (form.elements.namedItem('info') as HTMLTextAreaElement).value;

    // Calculate word count
    const words = info.trim().split(/\s+/).filter(word => word.length > 0);
    if (words.length < 10) {
      setWordCountError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–ª–æ–≤).');
      return; // Prevent form submission
    }

    setWordCountError(null); // Clear any previous error
    setUserInfo(info);
    onNext(); // This now triggers the logic in App.tsx
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <form onSubmit={handleSubmit} className="w-full max-w-3xl mx-auto bg-white p-8 rounded-lg shadow-xl border border-gray-200 animate-fade-in">
        <h2 className="text-3xl font-extrabold text-gray-800 mb-6 text-center">–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ üëã</h2>
        <p className="text-gray-600 text-center mb-6">–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏.</p>
        <div className="mb-6">
          <label htmlFor="info" className="block text-gray-700 text-sm font-medium mb-2 sr-only">
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ
          </label>
          <textarea
            id="info"
            name="info"
            rows={8}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-gray-700 placeholder-gray-400 transition duration-300 ease-in-out resize-y focus:shadow-lg"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –∏ —É–≤–ª–µ–∫–∞—é—Å—å –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –í —à–∫–æ–ª–µ –º–Ω–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —è —á–∏—Ç–∞—é —Ñ—ç–Ω—Ç–µ–∑–∏ –∏ –∏–≥—Ä–∞—é –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã. –•–æ—á—É –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É, –≥–¥–µ —Å–º–æ–≥—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–ª—å–∑—É..."
            required
          />
          {wordCountError && (
            <p className="text-red-500 text-sm mt-2 text-center">{wordCountError}</p>
          )}
        </div>
        <button type="submit" className="btn-primary">
          –î–∞–ª–µ–µ
        </button>
      </form>
    </div>
  );
}

export default Intro;
