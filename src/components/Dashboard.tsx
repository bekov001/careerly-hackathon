import { Bar, Pie } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  type ChartData,
  type ChartOptions,
} from 'chart.js';
import React, { useState, useEffect } from 'react';

// Register all necessary components for Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

type Props = {
  job: string | null;
  userInfo: string;
  answers: string[];
  userSkills: string[];
  accessToken: string | null;
};

// Define an interface for the backend response structure
interface BackendAnalysisResponse {
  suitable_professions: string[];
  vacancies: {
    [key: string]: {
      title: string;
      company: string;
      salary: string;
      link?: string; // Add link field if backend provides it, otherwise we'll mock it
    }[];
  };
  strengths: string[];
  weaknesses: string[];
  roadmap: string[];
  pdf_links: {
    [key: string]: string;
  };
}

function Dashboard({ job, userInfo, answers, userSkills, accessToken }: Props) {
  const [backendData, setBackendData] = useState<BackendAnalysisResponse | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!job) {
      setError('–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ üòî');
      setLoading(false);
      return;
    }

    const fetchAnalysis = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await fetch('https://kajet24.work.gd/api/chat/analysis/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            ...(accessToken && { 'Authorization': `Bearer ${accessToken}` }),
          },
          body: JSON.stringify({
            skills: userSkills,
            about: userInfo,
            questions: [], // The backend sample doesn't use these for suitable_professions, but include for completeness
            answers: answers,
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data: BackendAnalysisResponse = await response.json();
        setBackendData(data);
      } catch (e: any) {
        setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${e.message}`);
        console.error("Error fetching analysis data:", e);
        // Fallback to sample data if API fails
        setBackendData({
          suitable_professions: ['Frontend Developer', 'Backend Developer'],
          vacancies: {
            'Frontend Developer': [
              { title: 'Junior Frontend Developer', company: 'Tech Solutions Inc.', salary: '250 000 - 400 000 KZT', link: 'https://hh.kz/vacancy/99123456' },
              { title: 'UX/UI Designer', company: 'Creative Agency', salary: '200 000 - 350 000 KZT', link: 'https://hh.kz/vacancy/99345678' },
            ],
            'Backend Developer': [
              { title: 'Python Backend Developer', company: 'Innovate Systems', salary: '300 000 - 550 000 KZT', link: 'https://hh.kz/vacancy/99234567' },
              { title: 'Data Analyst Intern', company: 'Global Analytics', salary: '150 000 - 250 000 KZT', link: 'https://hh.kz/vacancy/99456789' },
            ],
          },
          strengths: ['Problem Solving', 'Adaptability'],
          weaknesses: ['Lack of specific industry knowledge'],
          roadmap: [
            '–ù–µ–¥–µ–ª—è 1‚Äì2: –ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Python –∏–ª–∏ JavaScript) –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û.',
            '–ù–µ–¥–µ–ª—è 3‚Äì4: –ü—Ä–æ–π—Ç–∏ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –ø–æ –æ—Å–Ω–æ–≤–∞–º –≤–∞—à–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–≤–µ–¥–µ–Ω–∏–µ –≤–æ Frontend" –∏–ª–∏ "–û—Å–Ω–æ–≤—ã Data Science").',
            '–ù–µ–¥–µ–ª—è 5‚Äì8: –°–æ–∑–¥–∞—Ç—å 1-2 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∏—Å–ø–æ–ª—å–∑—É—è –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è.',
            '–ù–µ–¥–µ–ª—è 9‚Äì12: –£–≥–ª—É–±–∏—Ç—å—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, React –¥–ª—è Frontend, Django –¥–ª—è Backend, Figma –¥–ª—è UX).',
            '–ù–µ–¥–µ–ª—è 13‚Äì16: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–≤—ã–∫–∏.',
            '–ù–µ–¥–µ–ª—è 17‚Äì20: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º, —Ä–µ—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ.',
            '–ù–µ–¥–µ–ª—è 21+: –ê–∫—Ç–∏–≤–Ω–æ –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–ª–∞–∂–∏–≤–∞—Ç—å —Å–≤—è–∑–∏ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.',
          ],
          pdf_links: {
            "Back-End Engineer": "https://roadmap.sh/pdfs/roadmaps/back-end.pdf",
            "Software Engineer": "https://roadmap.sh/pdfs/roadmaps/software-engineer.pdf",
            "Python Developer": "https://roadmap.sh/pdfs/roadmaps/python.pdf",
            "API Developer": "https://roadmap.sh/pdfs/roadmaps/rest-apis.pdf",
            "Django Developer": "https://roadmap.sh/pdfs/roadmaps/django.pdf",
            // Add other common roles if needed for fallback
            "Frontend Developer": "https://roadmap.sh/pdfs/roadmaps/frontend.pdf",
            "UX Designer": "https://roadmap.sh/pdfs/roadmaps/ux-design.pdf",
            "Data Analyst": "https://roadmap.sh/pdfs/roadmaps/data-scientist.pdf", // Closest for Data Analyst
          },
        });
      } finally {
        setLoading(false);
      }
    };

    fetchAnalysis();
  }, [job, userInfo, answers, userSkills, accessToken]);

  if (loading) {
    return (
      <div className="max-w-3xl mx-auto bg-white p-8 rounded-lg shadow-xl border border-gray-200 animate-fade-in-up text-center">
        <p className="text-xl font-medium text-blue-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–æ–µ–≥–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ–∞–¥–º–∞–ø–∞... üöÄ</p>
      </div>
    );
  }

  if (error) {
    return (
      <p className="text-center text-red-500 text-lg font-medium">
        {error}
      </p>
    );
  }

  if (!backendData || !job) {
    return (
      <p className="text-center text-red-500 text-lg font-medium">
        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤—ã–±—Ä–∞–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.
      </p>
    );
  }

  const currentSkillRatings = [2, 1, 1, 3]; // Mock data for now, as backend doesn't provide it
  const targetSkillRatings = [4, 3, 4, 5]; // Mock data for now, as backend doesn't provide it

  // Mock data for roadmap phase focus (e.g., in percentages of total learning time)
  const roadmapPhaseFocusData = {
    labels: ['–û—Å–Ω–æ–≤—ã', '–ö—É—Ä—Å—ã', '–ü—Ä–æ–µ–∫—Ç—ã', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã'],
    datasets: [
      {
        label: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–∏–ª–∏–π',
        data: [20, 25, 30, 15, 10],
        backgroundColor: [
          'rgba(255, 99, 132, 0.6)',
          'rgba(54, 162, 235, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(75, 192, 192, 0.6)',
          'rgba(153, 102, 255, 0.6)',
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  // Skill Proficiency Comparison Chart Data
  const skillProficiencyChartData = {
    labels: ['–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'Soft Skills'],
    datasets: [
      {
        label: '–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞',
        data: currentSkillRatings,
        backgroundColor: 'rgba(59, 130, 246, 0.6)',
        borderColor: 'rgba(59, 130, 246, 1)',
        borderWidth: 1,
      },
      {
        label: '–¶–µ–ª–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞',
        data: targetSkillRatings,
        backgroundColor: 'rgba(16, 185, 129, 0.6)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 1,
      },
    ],
  };

  // Options for Skill Proficiency Comparison Chart
  const skillProficiencyOptions: ChartOptions<'bar'> = {
    responsive: true,
    plugins: {
      legend: { position: 'top' },
      title: {
        display: true,
        text: '–û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: –¢–µ–∫—É—â–∞—è vs. –¶–µ–ª–µ–≤–∞—è',
        font: { size: 16, weight: 'bold' },
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        max: 5,
        ticks: {
          callback: (value) => {
            const v = Number(value);
            switch (v) {
              case 1: return '–ù–∞—á–∞–ª—å–Ω—ã–π';
              case 2: return '–ë–∞–∑–æ–≤—ã–π';
              case 3: return '–°—Ä–µ–¥–Ω–∏–π';
              case 4: return '–•–æ—Ä–æ—à–∏–π';
              case 5: return '–≠–∫—Å–ø–µ—Ä—Ç';
              default: return '';
            }
          },
        },
      },
    },
  };

  // Options for Roadmap Phase Focus Chart
  const roadmapFocusOptions: ChartOptions<'pie'> = {
    responsive: true,
    plugins: {
      legend: { position: 'right' },
      title: {
        display: true,
        text: '–§–æ–∫—É—Å –ø–æ —ç—Ç–∞–ø–∞–º —Ä–æ–∞–¥–º–∞–ø–∞',
        font: { size: 16, weight: 'bold' },
      },
      tooltip: {
        callbacks: {
          label: (context) => {
            const label = context.label || '';
            const value = context.parsed;
            return `${label}: ${value}%`;
          },
        },
      },
    },
  };

  // Existing Known Skills Chart Data
  const knownSkillsChartData = {
    labels: userSkills.length > 0 ? userSkills.slice(0, 5) : ['–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤'],
    datasets: [
      {
        label: '–ò–º–µ—é—â–∏–µ—Å—è –Ω–∞–≤—ã–∫–∏',
        data: userSkills.length > 0 ? userSkills.slice(0, 5).map(() => 100) : [0],
        backgroundColor: 'rgba(16, 185, 129, 0.6)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 1,
      },
    ],
  };

  const knownSkillsChartOptions: ChartOptions<'bar'> = {
    responsive: true,
    indexAxis: 'y',
    plugins: {
      legend: { display: false },
      title: {
        display: true,
        text: '–¢–≤–æ–∏ —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è –Ω–∞–≤—ã–∫–∏',
        font: { size: 16, weight: 'bold' },
      },
    },
    scales: {
      x: {
        beginAtZero: true,
        max: 100,
        ticks: {
          callback: (value) => `${value}%`,
        },
      },
    },
  };

  const relevantVacancies = backendData.vacancies[job] || [];

  // Determine the PDF link for the current job, considering variations
  const getPdfLink = (jobTitle: string) => {
    // Normalize job title to match keys in pdf_links, e.g., "Back-End Engineer" vs "Backend Developer"
    const normalizedJobTitle = jobTitle.toLowerCase().replace(/dev(eloper)?|engineer/g, '').trim();

    // Check direct match
    if (backendData.pdf_links[jobTitle]) {
      return backendData.pdf_links[jobTitle];
    }
    // Check for "Backend" or "Python" if job is related
    if (normalizedJobTitle.includes('backend') || normalizedJobTitle.includes('back-end')) {
      return backendData.pdf_links['Back-End Engineer'] || backendData.pdf_links['Software Engineer'];
    }
    if (normalizedJobTitle.includes('python')) {
      return backendData.pdf_links['Python Developer'];
    }
    if (normalizedJobTitle.includes('software')) {
        return backendData.pdf_links['Software Engineer'];
    }
    if (normalizedJobTitle.includes('frontend') || normalizedJobTitle.includes('front-end')) {
        return backendData.pdf_links['Frontend Developer'];
    }
    if (normalizedJobTitle.includes('data analyst')) {
        return backendData.pdf_links['Data Analyst'];
    }
    if (normalizedJobTitle.includes('ux') || normalizedJobTitle.includes('ui')) {
        return backendData.pdf_links['UX Designer'];
    }
    if (normalizedJobTitle.includes('api')) {
      return backendData.pdf_links['API Developer'];
    }
    if (normalizedJobTitle.includes('django')) {
        return backendData.pdf_links['Django Developer'];
    }

    // Fallback to a generic or null if no match
    return null;
  };

  const currentPdfLink = job ? getPdfLink(job) : null;

  // Helper function to safely extract salary number from salary string
  const extractSalaryNumber = (salaryString: string | undefined | null): number => {
    if (!salaryString || typeof salaryString !== 'string') {
      return 100000; // Default fallback salary
    }
    
    // Try to find numbers in the salary string
    const numbers = salaryString.match(/\d+/g);
    if (numbers && numbers.length > 0) {
      // Take the first number found and convert to integer
      return parseInt(numbers[0].replace(/\s/g, ''), 10);
    }
    
    return 100000; // Default fallback salary
  };

  return (
    <div className="max-w-3xl mx-auto bg-white p-8 rounded-lg shadow-xl border border-gray-200 animate-fade-in-up">
      <h2 className="text-3xl font-extrabold text-gray-800 mb-6 text-center">–¢–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø üöÄ</h2>
      <p className="text-xl mb-4 text-blue-700 font-semibold text-center">{job}</p>

      <div className="mb-8">
        <h3 className="text-2xl font-bold text-gray-700 mb-4 border-b pb-2">–û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –Ω–∞ –ø—É—Ç–∏:</h3>
        <ul className="space-y-3 text-lg text-gray-700">
          {backendData.roadmap.length > 0 ? (
            backendData.roadmap.map((stepText, idx) => (
              <li key={idx} className="flex items-start">
                <span className="text-blue-500 mr-3 mt-1">üí°</span>
                <span>{stepText}</span>
              </li>
            ))
          ) : (
            <p className="text-gray-500">–®–∞–≥–∏ —Ä–æ–∞–¥–º–∞–ø–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.</p>
          )}
        </ul>
        <p className="mt-6 text-gray-500 text-sm italic border-t pt-4">
          <span className="font-semibold">üî• –°–æ–≤–µ—Ç:</span> –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ä–æ–∞–¥–º–∞–ø—ã.
        </p>
      </div>

      <div className="mt-8 border-t pt-8">
        <h3 className="text-2xl font-bold text-gray-700 mb-4 text-center">–¢–≤–æ–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h3>
        <div className="bg-gray-50 p-6 rounded-lg shadow-inner text-gray-700">
          <p className="mb-2"><span className="font-semibold">–û —Å–µ–±–µ:</span> {userInfo}</p>
          <p className="mb-2"><span className="font-semibold">–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</span> {answers.join(', ')}</p>
          {userSkills.length > 0 && <p className="mb-2"><span className="font-semibold">–ò–º–µ—é—â–∏–µ—Å—è –Ω–∞–≤—ã–∫–∏:</span> {userSkills.join(', ')}</p>}
        </div>
      </div>

      <div className="mt-8 border-t pt-8">
        <h3 className="text-2xl font-bold text-gray-700 mb-4 text-center">–¢–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</h3>
        <ul className="list-disc list-inside space-y-1 text-gray-700 pl-4">
          {backendData.strengths.length > 0 ? (
            backendData.strengths.map((strength, idx) => (
              <li key={idx}>{strength}</li>
            ))
          ) : (
            <li>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.</li>
          )}
        </ul>
      </div>

      <div className="mt-4 border-t pt-4">
        <h3 className="text-2xl font-bold text-gray-700 mb-4 text-center">–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</h3>
        <ul className="list-disc list-inside space-y-1 text-gray-700 pl-4">
          {backendData.weaknesses.length > 0 ? (
            backendData.weaknesses.map((weakness, idx) => (
              <li key={idx}>{weakness}</li>
            ))
          ) : (
            <li>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.</li>
          )}
        </ul>
      </div>

      <div className="mt-8 border-t pt-8 grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Skill Proficiency Chart */}
        <div>
          <div className="bg-white p-6 rounded-lg shadow-md border border-gray-100 h-full flex flex-col justify-between">
            <Bar data={skillProficiencyChartData as ChartData<'bar'>} options={skillProficiencyOptions as ChartOptions<'bar'>} />
            <p className="mt-4 text-gray-500 text-sm text-center">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å —Ü–µ–ª–µ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.</p>
          </div>
        </div>

        {/* Roadmap Focus Pie Chart */}
        <div>
          <div className="bg-white p-6 rounded-lg shadow-md border border-gray-100 h-full flex flex-col justify-between">
            <Pie data={roadmapPhaseFocusData as ChartData<'pie'>} options={roadmapFocusOptions as ChartOptions<'pie'>} />
            <p className="mt-4 text-gray-500 text-sm text-center">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–∏–ª–∏–π –ø–æ —ç—Ç–∞–ø–∞–º —Ç–≤–æ–µ–≥–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ–∞–¥–º–∞–ø–∞.</p>
          </div>
        </div>

        {/* Known Skills Chart */}
        <div className="md:col-span-2">
          <div className="bg-white p-6 rounded-lg shadow-md border border-gray-100 h-full flex flex-col justify-between">
            {userSkills.length > 0 ? (
              <Bar data={knownSkillsChartData as ChartData<'bar'>} options={knownSkillsChartOptions as ChartOptions<'bar'>} />
            ) : (
              <p className="text-center text-gray-500 h-full flex items-center justify-center">–ù–∞–≤—ã–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í–µ—Ä–Ω–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ù–∞–≤—ã–∫–∏" –∏ –¥–æ–±–∞–≤—å –∏—Ö!</p>
            )}
            <p className="mt-4 text-gray-500 text-sm text-center">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ.</p>
          </div>
        </div>
      </div>

      <div className="mt-8 border-t pt-8">
        <h3 className="text-2xl font-bold text-gray-700 mb-4 text-center">–í–∞–∫–∞–Ω—Å–∏–∏ (–ü—Ä–∏–º–µ—Ä—ã) üíº</h3>
        <p className="mb-6 text-gray-600 text-center">–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –Ω–∞–≤—ã–∫–æ–≤. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ hh.kz!</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {relevantVacancies.length > 0 ? (
            relevantVacancies.map((vacancy, idx) => {
              const salaryNumber = extractSalaryNumber(vacancy.salary);
              const searchUrl = `https://hh.kz/search/vacancy?text=${encodeURIComponent(vacancy.title)}&salary_from=${salaryNumber}&only_with_salary=true&enable_snippets=true&ored_clusters=true&hhtmFrom=vacancy_search_list`;
              
              return (
                <a 
                  key={idx} 
                  href={vacancy.link || searchUrl} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="block bg-white p-5 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 border border-gray-200"
                >
                  <h4 className="text-lg font-semibold text-gray-800 mb-2">{vacancy.title}</h4>
                  <p className="text-gray-600 text-sm mb-1">{vacancy.company}</p>
                  <p className="text-green-600 font-bold text-md mb-3">{vacancy.salary || '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                  <button className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50">
                    –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ hh.kz ‚Üí
                  </button>
                </a>
              );
            })
          ) : (
            <p className="text-center text-gray-500 md:col-span-2">–í–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
          )}
        </div>
        <p className="mt-6 text-center text-gray-500 text-sm italic">–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –ø—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ hh.kz.</p>
      </div>

      <div className="mt-8 text-center">
        {currentPdfLink ? (
          <a
            href={currentPdfLink}
            target="_blank"
            rel="noopener noreferrer"
            className="btn-primary inline-block"
          >
            –°–∫–∞—á–∞—Ç—å Roadmap PDF –¥–ª—è "{job}"
          </a>
        ) : (
          <button onClick={() => alert('PDF-—Ä–æ–∞–¥–º–∞–ø –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')} className="btn-primary opacity-70 cursor-not-allowed">
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
          </button>
        )}
      </div>
    </div>
  );
}

export default Dashboard;